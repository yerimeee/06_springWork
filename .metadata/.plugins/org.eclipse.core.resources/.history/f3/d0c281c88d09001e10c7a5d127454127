package com.kh.spring.demo.controller;

import java.time.LocalDateTime;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.kh.spring.demo.model.service.DemoService;
import com.kh.spring.demo.model.vo.Dev;

/*
@Controller 클래스의 handler 메소드가 가질수 있는 매개변수 타입
HttpServletRequest
HttpServletResponse
HttpSession

java.util.Locale: 요청에 대한 Locale
InputStream/Reader: 요청에 대한 입력스트림
OutputStream/Writer : 응답에 대한 출력스트림. ServletOutputStream, PrintWriter

사용자입력값처리
Command객체 : http요청 파라미터를 커맨드객체에 저장한 VO객체
CommandMap : HandlerMethodArgumentResolver에 의해 처리된 사용자입력값을 가진 Map 객체 
@Valid : 커맨드 객체 유효성 검사객체
Error, BindingResult: Command객체에 저장결과(Command객체 바로 다음위치시킬것.)
@PathVariable : 요청url 중 일부를 매개변수로 취할 수 있다.
@RequestParam: 사용자입력값을 자바변수에 대입처리(필수여부 설정)
@RequestHeader : 헤더값
@CookieValue: 쿠키값
@RequestBody: http message body에 작성된 json을 vo객체로 변환처리

뷰에 전달할 모델 데이터 설정
ModelAndView
ModelMap
Model

@ModelAttribute : model 속성에 대한 getter
@SessionAttribute : session속성에 대한 getter (required여부 선택가능)
@SessionAttributes : session에서 관리될 속성명을 class-level에 작성
SessionStatus: @SessionAttributes로 등록된 속성에 대하여 사용완료 (complete)처리. 세션을 폐기하지 않고 재사용한다.

기타
MultipartFile: 업로드파일 처리 인터페이스. CommonsMultipartFile
RedirectAttributes : DML처리후 요청주소 변경을 위한 redirect 속성처리 지원
*/

@Controller //사용자 요청을 하면 여기로 옴(서블릿 역할). 정해진 뷰에 객체를 넘겨줌
@RequestMapping("/demo") //이 클래스를 사용하는 모든 메소드의 맵핑 값에 모두 할당 
public class DemoController {
	
	//필요한 의존객체의 타입에 맞는 bean을 찾아 자동으로 값을 넣어주는데 setter&getter와 같은 기능
	@Autowired 
	private DemoService demoService;
	
	// @RequestMapping(value="/demo/devForm.do", method=RequestMethod.GET)		
	@RequestMapping("/devForm.do")	// (/devForm.do)과 같은 역할
	public String devForm() {
		return "demo/devForm";
	} //번들1
	
	@RequestMapping("/dev1.do")
	public String dev1(HttpServletRequest request, HttpServletResponse response) { //값 넘겨줄라면 변수 해줘야함
		String name = request.getParameter("name");
		int career = Integer.parseInt(request.getParameter("career"));
		String email = request.getParameter("email");
		String gender = request.getParameter("gender");
		String[] lang = request.getParameterValues("lang"); //값이 여러개라 배열로 받고 .getParameterValues로 함
		
		//bean파일에 생성자 순서대로 넣어주기
		Dev dev = new Dev(0, name, career, email, gender, lang, LocalDateTime.now());
		System.out.println(dev);
		
		request.setAttribute("dev", dev); //dev에 들어있는 값 넘겨주기 
		return "demo/devResult";
	} //번들2
	
	/*
	 * handler 메소드 : @Controller하위의 사용자 요청 처리 메소드
	 *  - 속성 
	 *  	- value :  path속성에 대한 별칭, value속성명 유일하게 생략가능
	 * 		- Method: 생략시 모든 전송 방식에 대해 처리
	 * 				 특정 method등록시 해당 전송방식만 처리
	 * 
	 */
	
	//@RequestParam은 클래스 단위로도 붙일 수 있으며 값을 직접 받을 때 사용한다
	@RequestMapping("/dev2.do") 
	public String dev2(@RequestParam String name,
						@RequestParam int career,
						@RequestParam String email,
						@RequestParam String gender,
						@RequestParam String[] lang,
						Model model) { 
	//Spring에선 전달해줄 때 request(일일이 가져와서 넣는 방식)보단 model(갖고오자마자 변수에 넣는 방식)을 사용
		
		//1. 사용자 입력값 처리(위의 값 받아서 Bean객체에 넣음)
		Dev dev = new Dev(0, name, career, email, gender, lang, LocalDateTime.now());
		System.out.println(dev);
		
		//2. Bean에 넣어서 jsp로 전달
		model.addAttribute("dev", dev); //request.setAttribute("dev",dev)와 동일
		return "demo/devResult";
	}
	
	@RequestMapping("/dev3.do") //get,post 다 받음
	public String dev3(Dev dev) { //dev에 알아서 이름 똑같은 거 매칭하여 넣어지게 됨(여기선 num과 날짜 빼고 다 넣어짐)
		dev.setCreateDate(LocalDateTime.now()); //날짜는 request로 안 받아서 직접 set으로 정의
		return "demo/devResult";
	}
	
	// @RequestMapping("/insertDev.do")
	//@RequestMapping(path="/insertDev.do", method=RequestMethod.POST) 이걸 밑처럼 바꾸기
	@PostMapping("/insertDev.do") //post만 받음
	public String insertDev(Dev dev, RedirectAttributes redirectAttr) {
		int result = demoService.insertDev(dev); //데이터베이스와 연동하기 위해 demoService의 메소드 호출
		
		 /* redirectAttr.addAttribute : requestParameter로 값을 전달, 값을 지속적으로 사용할 때
		  	redirectAttr.addFlashAttribute : 일회성으로 Redirect후 값이 소멸 */
		redirectAttr.addFlashAttribute("msg", "정상적으로 저장했습니다");
		return "redirect:/demo/devList.do"; 
		//여기로 넘어갈 때 redirectAttr값과 같이 넘어가기 위해 이 메소드의 변수값으로 넣어줬음
	}
	
	@GetMapping("/devList.do") //get만 받음
	public String devList(Model model) {
		//진행순서 controller -> service(Impl) -> Dao(Impl) -> demo-mapper.xml
		List<Dev> devList = demoService.selectDevList(); //Array의 부모가 List라서 List로 써도 됨
		System.out.println(devList);
		
		model.addAttribute("devList", devList);
		return "demo/devList";
	}
	
	@GetMapping("/updateDev.do")
	public String updateDev(@RequestParam int no) { //받는 값이 no 하나여서 @RequestParam으로 받아옴
		Dev dev = demoService.selectOneDev(no); //하나하나 검색해서 가져옴
		return "demo/devUpdateForm";
	}
}
